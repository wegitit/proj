# ansible config file
# ===============================================

# Original file location:
#  /etc/ansible/ansible.cfg

# ===============================================
# Nearly all parameters can be overridden in ansible-playbook or with command line flags.
# Ansible will read
#  ANSIBLE_CONFIG,
#  ansible.cfg in the current working directory,
#  .ansible.cfg in the home directory or 
#  /etc/ansible/ansible.cfg, 
# whichever it finds first

[defaults]

# Some basic default values...

#inventory         = /etc/ansible/hosts
inventory          = ./hosts
#library           = /usr/share/my_modules/
#module_utils      = /usr/share/my_module_utils/
#remote_tmp        = ~/.ansible/tmp
#local_tmp         = ~/.ansible/tmp
#forks             = 5
#poll_interval     = 15
#sudo_user         = root
#ask_sudo_pass     = True
#ask_pass          = True
#transport         = smart
#remote_port       = 22
#module_lang       = C
#module_set_locale = False

# Remote system fact gathering method:
#  smart    -        gather by default, but don't regather if already gathered
#  implicit -        gather by default, turn off with gather_facts: False
#  explicit - do not gather by default, must say      gather_facts: True
#gathering = implicit

# By default gathering retrieves all facts subsets
# This setting affects only the gathering done by a play's gather_facts directive
#  all      - gather all subsets
#  network  - gather min and network facts
#  hardware - gather hardware facts (longest facts to retrieve)
#  virtual  - gather min and virtual facts
#  facter   - import facts from facter
#  ohai     - import facts from ohai
# These options can be combined, separated by commas (ex: network,virtual), and
# negated ! (ex: !hardware,!facter,!ohai)
# Note that a minimal set of facts is always gathered.
#gather_subset = all

# The seconds to timeout for fact gathering.
# Some hardware related facts are collected with a maximum timeout of 10 seconds.
#gather_timeout = 10

# Additional paths to search for roles, colon separated
roles_path = /etc/ansible/roles:/usr/share/ansible/roles

# Enable or disable SSH key host checking
#host_key_checking = True

# Change the default callback, there can be only one 'stdout' type enabled at a time.
#stdout_callback = skippy

# Ansible ships with some plugins that require whitelisting,
# this is done to avoid running all of a type by default.
# Custom plugins should not need this unless the plugin author specifies it.
# Enabled callback plugins (they can output to stdout but cannot be 'stdout' type)
#callback_whitelist = timer, mail

# Declare whether includes in tasks and handlers are dynamic or "static" by default.
# As of 2.0, includes are dynamic by default.
# Setting these values to True will make includes behave more like they did in the 1.x versions.
#task_includes_static = False
#handler_includes_static = False

# Controls if a missing handler for a notification event is an error or a warning
#error_on_missing_handler = True

# Change this for alternative sudo implementations
#sudo_exe = sudo

# Define flags to pass to sudo
# WARNING: leaving out the defaults might create unexpected behaviours
#sudo_flags = -H -S -n

# SSH timeout
#timeout = 10

# User to use for playbooks if the playbook does not specify one
# (/usr/bin/ansible will use current user as default)
#remote_user = root

# Define this /path/to/file to enable logging
# if defined, consider using logrotate
#log_path =
log_path = /var/log/ansible.log

# Default module name for /usr/bin/ansible
#module_name = command

# The shell to use for commands executed under sudo
# Change this option to bin/bash if needed to handle the rare instances where sudo is constrained
#executable = /bin/sh
executable = /bin/bash

# If inventory variables overlap, does the higher precedence one win or
# are hash values merged together?
# The options are 'replace' and 'merge'
#hash_behaviour = replace

# Variables from roles will be visible in the global variable scope.
# To prevent this, so only tasks and handlers within the role will see the variables there,
# enable this option
#private_role_vars = no

# Enabled Jinja2 extensions
#jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n

# The /path/to/private_key_file to use for authentication,
# same as passing --private-key
#private_key_file =

# The /path/to/Vault_password_file,
# same as passing --vault-password-file
#vault_password_file =

# Format of string {{ ansible_managed }} available within Jinja2 templates
# that indicates to users editing templates that files will be replaced.
# In the example below, {file}, {host}, {uid} and strftime codes will be replaced with proper values.
#ansible_managed = Ansible managed: {file} modified on %Y-%m-%d %H:%M:%S by {uid} on {host}
# Since {file}, {host}, {uid} and the timestamp can all interfere with idempotence in some situations
# the default is a static string:
#ansible_managed = Ansible managed
ansible_managed = This file is Ansible Managed - Beware that manual edits may be overwritten

# ansible-playbook will display "Skipping [host]" if it determines a task should not be run on a host.
# To omit those messages, set this to False.
# NOTE: the task header will be shown regardless of whether or not the task is skipped.
#display_skipped_hosts = True

# If a task in a playbook does not include a name: field, ansible-playbook
# will construct a header that includes the task's action but not the task's args.
# This is a security feature because ansible cannot know if the *module*
# considers an argument to be no_log at the time the header is printed.
# If securing stdout from ansible-playbook is not a problem
# (or if playbooks specifiy no_log on all of the tasks where there is secret information)
# this can be safely set to True to get more informative messages.
#display_args_to_stdout = False

# Ansible will raise errors when attempting to dereference
# Jinja2 variables that are not set in templates or action lines (as of 1.3).
# To revert to pre-1.3 behavior, set this to False
#error_on_undefined_vars = True

# Ansible may display warnings based on the configuration of the system running ansible (as of 1.6).
# This may include warnings about 3rd party packages or other conditions that should be resolved if possible.
# To disable these warnings, set this to False
#system_warnings = True

# Ansible may display deprecation warnings for language
# features that should no longer be used and will be removed in future versions (as of 1.4).
# To disable these warnings, set this to False
#deprecation_warnings = True

# Ansible can warn when a default module can be used instead of the shell or command module (as of 1.8)
# For example, Ansible can suggest using the git module instead of shelling out to the git command.
# This can be allowed or supressed by adding warn=yes or warn=no to the end of the command line or
# by changing this setting.
#command_warnings = False

# Plugin path directories, separated by colons
#action_plugins     = /usr/share/ansible/plugins/action
#cache_plugins      = /usr/share/ansible/plugins/cache
#callback_plugins   = /usr/share/ansible/plugins/callback
#connection_plugins = /usr/share/ansible/plugins/connection
#lookup_plugins     = /usr/share/ansible/plugins/lookup
#inventory_plugins  = /usr/share/ansible/plugins/inventory
#vars_plugins       = /usr/share/ansible/plugins/vars
#filter_plugins     = /usr/share/ansible/plugins/filter
#test_plugins       = /usr/share/ansible/plugins/test
#terminal_plugins   = /usr/share/ansible/plugins/terminal
#strategy_plugins   = /usr/share/ansible/plugins/strategy

# Execution strategy (free | linear | serial)
#strategy = linear

# Callbacks are not loaded for /bin/ansible by default.
# To enable, for example, a notification or logging callback to also apply to /bin/ansible runs
# set this to True
#bin_ansible_callbacks = False

# To enable|disable cowsay, export ANSIBLE_NOCOWS=1|0 or change this setting
#nocows = 0
nocows = 1

# Set the cowsay stencil ('random' | 'default').
# When set to 'random', a random stencil will be selected for each task. 
# The selection will be filtered against the `cow_whitelist` option below.
#cow_selection = default

# When using the 'random' option for cowsay, stencils will be restricted to this list
# (comma-separated, no spaces between names).
# NOTE: The line continuations in this example are for formatting purposes only
#       The python INI parser does not support them
#cow_whitelist=bud-frogs,bunny,cheese,daemon,default,dragon,elephant-in-snake,elephant,eyes,\
#              hellokitty,kitty,luke-koala,meow,milk,moofasa,moose,ren,sheep,small,stegosaurus,\
#              stimpy,supermilker,three-eyes,turkey,turtle,tux,udder,vader-koala,vader,www

# To enable|disable colors, export ANSIBLE_NOCOLOR=1|0 or change this setting
#nocolor = 0

# If set to a persistent type ('redis' for example)
# fact values from previous runs in Ansible will be stored.  
# Persisted facts are useful to, for example, store IP information from one group of servers
# without having to talk to them in the same playbook run to get their current IP information.
#fact_caching = memory

# Set whether retry files are created when a playbook fails
#retry_files_enabled = True

# Set the location of retry files
#retry_files_save_path = ~/.ansible-retry

# Ansible can optimise (or "squash") actions that call modules with list parameters when looping.
# Instead of calling the module once per with_ item, the module is called once with all items at once.
# This only works under limited circumstances, and only with parameters named 'name'.
#squash_actions = apk,apt,dnf,homebrew,pacman,pkgng,yum,zypper

# Prevent logging of task data (True: do not log data, False: log data)
#no_log = False

# Prevent logging of tasks on the targets, data is still logged on the master/controller
#no_target_syslog = False

# Raise an error or warning if a task has no choice but to create world readable temporary files
# to execute a module on the remote machine.
# False is the more secure option
# True provides behavior more like versions prior to 2.1.x
# For more secure alternatives to enabling this option, see
# docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user
#allow_world_readable_tmpfiles = False

# Set the compression level of variables sent to worker processes.
# 0 = no compression, max = 9, integers only
#var_compression_level = 9

# Set the compression method used for new-style ansible modules sent to the remote system.
# Both the controller and client need to have support for the method compiled into their python system
# The names should match with the python Zipfile compression types:
#   ZIP_STORED (universally supported, no compression)
#   ZIP_DEFLATED (requires zlib)
# The method may be set per host via the ansible_module_compression inventory variable
#module_compression = 'ZIP_DEFLATED'

# Set the cutoff point (in bytes) on --diff for files
# 0 = unlimited (RAM may suffer!).
#max_diff_size = 1048576

# Set how multiple --tags and --skip-tags arguments are handled by the CLI.  
# True: multiple arguments are merged together.  
# False: the last specified argument is used and the others are ignored
# Deprecated, to be removed in 2.8.
#merge_multiple_cli_flags = False

# Set whether custom stats are shown at the end
#show_custom_stats = False

# Set which files to ignore when using a directory, with possibly multiple sources
# (both static and dynamic), as inventory
# See also: ignore_extensions
#inventory_ignore_extensions = ~, .bak, .cfg, .ini, .orig, .pyc, .pyo, .retry

# The network group modules use an alternative execution path that is optimized for network appliances
# Only update this setting if you know how this works
# This is an "expert" setting, misconfiguring it can break module execution generally
#network_group_modules=['eos', 'nxos', 'ios', 'iosxr', 'junos', 'vyos']

# Allow lookups to return data that is not marked "unsafe" via variables like
# This means the data may contain jinja2 templating language which will be run through
# the templating engine.
# ENABLING THIS COULD BE A SECURITY RISK
#allow_unsafe_lookups = False

# Set whether errors will be treated as fatal errors
#any_errors_fatal = False

[inventory]
# Enable inventory plugins, options: constructed, host_list, ini, script, virtualbox, yaml
#enable_plugins = host_list, ini, script, yaml

# Ignore these extensions when parsing a directory as inventory source
# See also: inventory_ignore_extensions
#ignore_extensions = ~, .cfg, .bak, .ini, .md, .orig, .pyc, .pyo, .retry, .rpm, .swp, .txt

# Ignore files matching these patterns when parsing a directory as inventory source
#ignore_patterns=

# Treat unparsed inventory sources as fatal errors (True) or warnings (False)
#unparsed_is_failed=False

[privilege_escalation]
#become=True
#become_method=sudo
#become_user=root
#become_ask_pass=False

[paramiko_connection]
# Set whether the paramiko connection plugin records new host keys it encounters.
# Increases performance on new host additions.
# Works independently of the host key checking setting.
#record_host_keys=True

# Set whether a pseudo-terminal is requested for commands executed under sudo (True) or not (False)
#pty=True

# Set whether Paramiko should look for SSH keys initially when trying to authenticate to remote devices.
# For some network devices that close the connection after a key failure, that
# behavior can be a problem. 
#look_for_keys = True

# Set whether Paramiko should automatically add host keys.
# When using persistent connections with Paramiko, the connection runs in a background process.
# If the host key hasn't been saved, Ansible will prompt to add the host key.
# This will cause connections running in background processes to fail.
# To work around that problem, change this setting
#host_key_auto_add = False

[ssh_connection]
# ssh arguments to use
# Leaving off ControlPersist will result in poor performance;
# use paramiko on older platforms rather than removing it.
# -C controls compression use
#ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s

# The base directory for the ControlPath sockets. 
# This is the "%(directory)s" in the control_path option
# 
# Example: 
# control_path_dir = /tmp/.ansible/cp
#control_path_dir = ~/.ansible/cp

# The path to use for the ControlPath sockets.
# Defaults to a hashed string of the hostname, port and username (specified with an empty string in ansible.cfg).
# The hash mitigates a common problem with long hostames and
# the conventional %(directory)s/ansible-ssh-%%h-%%p-%%r format. 
# In those cases, a "too long for Unix domain socket" ssh error would occur.
#
# Example:
# control_path = %(directory)s/%%h-%%r
#control_path =

# Enabling pipelining reduces the number of SSH operations required to
# execute a module on the remote server. This can result in a significant
# performance improvement when enabled, however when using "sudo:" you must
# first disable 'requiretty' in /etc/sudoers in both the control and target machines.
#
# By default, this option is disabled to preserve compatibility with
# sudoers configurations that have requiretty (the default on many distros).
#pipelining = False

# Control the mechanism for transferring files (old)
#   smart = try sftp, then try scp
#   True  = use scp only
#   False = use sftp only
#scp_if_ssh = smart

# Control the mechanism for transferring files (new)
# If set, this will override the scp_if_ssh option
#   sftp  = use sftp to transfer files
#   scp   = use scp to transfer files
#   piped = use 'dd' over SSH to transfer files
#   smart = try (in order) sftp, scp, then piped
#transfer_method = smart

# sftp batch mode file transfers.
# Setting to False may cause some types of file transfer failures that are impossible to catch.
# Disable "Only If" sftp has problems with batch mode
#sftp_batch_mode = True

[persistent_connection]
# Persistent connection timeout setting.
# Sets the number of seconds the persistent connection will remain idle before it is destroyed.  
# If the connection doesn't receive a request before the timeout value 
# expires, the connection is shutdown.
#connect_timeout = 30

# Persistent connection retry timeout settiing.
# Sets the retry timeout that ansible-connection will wait to connect to the local domain socket.
# Must be larger than the ssh timeout (timeout) and
# less than the persistent connection idle timeout (connect_timeout).
#connect_retry_timeout = 15

# Command timeout setting.
# Sets the number of seconds to wait for a command or RPC call before timing out.
# Must be less than the value of the persistent connection idle timeout (connect_timeout)
#command_timeout = 10

[accelerate]
#accelerate_port            = 5099
#accelerate_timeout         = 30
#accelerate_connect_timeout = 5.0

# The daemon timeout, in minutes, since the last daemon activity
#accelerate_daemon_timeout = 30

# Set whether accelerate_multi_key will allow multiple private keys to be uploaded to it,
# each user must have access to the system via SSH to add a new key.
#accelerate_multi_key = no

[selinux]
# Set the file systems that require special treatment when dealing with security context
# The default behaviour, to copy the existing context or use the user default,
# needs to be changed to use the file system dependent context.
#special_context_filesystems=nfs,vboxsf,fuse,ramfs,9p

# Set whether to allow libvirt_lxc connections to work without SELinux.
#libvirt_lxc_noseclabel = yes

[colors]
#highlight   = white
#verbose     = blue
#warn        = bright purple
#error       = red
#debug       = dark gray
#deprecate   = purple
#skip        = cyan
#unreachable = red
#ok          = green
#changed     = yellow
#diff_add    = green
#diff_remove = red
#diff_lines  = cyan


[diff]
# Always print diff when running ( same as always running with -D/--diff )
#always = no

# Set how many context lines to show in diff
#context = 3
