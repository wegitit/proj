#!/bin/python


# Return a password hash for use in the shadow file
#
#
# Arguments:
#  -h, --help
#  -p, --password
#  -s, --salt [optional: autogenerated if omitted]
#
# Usage:
#  python prog.py  -s=<salt> -p=<password>
#  python prog.py --salt=<salt> --password=<password>
#
# Exit codes:
#  0: Normal
#  1: Error
#
#
# NOTES:
#  This script wraps a "generate *nix shadow password hash" method
#   It's often a one-liner :)
#
#  Per the Python docs (REF[4]):
#   salt is a random two-character string in the set [./a-zA-Z0-9]
#
#  Ansible's advice (see REF[3]):
#   use SHA512
#   use mkpasswd (in RHEL, a part of the expect package, not installed in 'Minimal')
#
#  Ansible's example (requires passlib via pip):
#   python -c "from passlib.hash import sha512_crypt; import getpass; print sha512_crypt.encrypt(getpass.getpass())"
#
#
# REF[1] unix.stackexchange.com/questions/158400/etc-shadow-how-to-generate-6-s-encrypted-password
#    [2] unix.stackexchange.com/questions/52108/how-to-create-sha512-password-hashes-on-command-line
#    [3] docs.ansible.com/ansible/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module
#    [4] docs.python.org/2/library/crypt.html
#    [5] davidsj.co.uk/blog/python-generate-random-password-strings/
#    [6] practicepython.org/solution/2014/06/06/16-password-generator-solutions.html
#    [7] docs.python.org/2/library/getopt.html
#    [8] docs.python.org/2/howto/argparse.html
#    [9] stackoverflow.com/questions/6810999/how-to-determine-file-function-and-line-number/6811020#6811020
#


import crypt, getopt, inspect, random, re, string, sys


# vars
Empty_String = ''
ExitCode_Normal = 0
ExitCode_Error = 1


#
# Print help text
# Exits with exitCode [optional: ExitCode_Normal if omitted]
#
# Expects:
#  int exitCode
#
# Returns:
#  None
#
def exitWithHelp(exitCode):
    progName = sys.argv[0]
    _exitCode = exitCode or ExitCode_Normal

    print 'Return a password hash for use in the shadow file'
    print
    print progName + '  -h || --help'
    print progName + '  -s=<salt>    [optional]  -p=<password>'
    print progName + ' --salt=<salt> [optional] --password=<password>'
    print
    print 'Exit Codes:'
    print '', ExitCode_Normal, 'Normal'
    print '', ExitCode_Error, 'Error'

    sys.exit(_exitCode)


#
# Expects:
#  None
#
# Returns:
#  list : [('password', string:passwordValue), ('salt', string:saltValue)]
#
# NOTE: "getopt - C-style parser for command line options" REF[7],
#       urges use of argparse (see "argparse tutorial" REF[8]) instead
#
def getCommandLineValues():
    flags = None
    options = None
    password = Empty_String
    salt = Empty_String


    try:
      options, flags = getopt.getopt(sys.argv[1:], 'hp:s:', ['help', 'password=', 'salt='])

      if len(sys.argv) == 1:
        raise ValueError

    except getopt.GetoptError as err:
      exitWithHelp(ExitCode_Error)

    except ValueError:
      exitWithHelp(ExitCode_Error)


    for flag in flags:
      if flag in ('-h', '--help'):
        exitWithHelp(ExitCode_Normal)
      else:
        # unrecognized flag
        exitWithHelp(ExitCode_Error)


    for opt, arg in options:
      if opt in ('-h', '--help'):
        exitWithHelp(ExitCode_Normal)
      elif opt in ('-s', '--salt'):
        salt = arg.lstrip('=')
      elif opt in ('-p', '--password'):
        password = arg.lstrip('=')
      else:
        # unrecognized option
        exitWithHelp(ExitCode_Error)


    if password == Empty_String:
      exitWithHelp(ExitCode_Error)


    return [('password', password), ('salt', salt)]


#
# Expects:
#  string salt [optional: autogenerated if omitted]
#
# Returns:
#  string salt
#
# Requires:
#  modules: random, re, string
#
# NOTE:
#  raises:
#   ValueError when salt does not match ^[./a-zA-Z0-9]{2}$
#  salt info: "Generate Random Password Strings" REF[5]
#  alt approaches: "Password Generator Solutions" REF[6]
#
def getPrefix(salt):
    DOLLAR_SIGN = '$'
    RE_PATTERN = '^[./a-z0-9]{2}$'

    MD5 = '1'
    SHA256 = '5'
    SHA512 = '6'

    _salt = salt or Empty_String
    saltLenDef = 2


    ## empty? replace it
    if _salt == Empty_String:
      # available character types:
      #  string.{digits, letters, punctuation}
      chars = string.letters + string.digits
      _salt = Empty_String.join((random.choice(chars)) for x in range(saltLenDef))
    else:
      reResult = re.match(RE_PATTERN, _salt, re.I)

      ## bad char(s)? exit
      if reResult == None:
        raise ValueError

    return DOLLAR_SIGN + SHA512 + DOLLAR_SIGN + _salt + DOLLAR_SIGN


# DEBUG ########################################################################
# ##############################################################################
#
# Expects:
#  None
#
# Returns
#  Caller's currently executing line number
#
# Requires:
#  modules: inspect
#
# REF: "how to determine file, function and line number" REF[9]
#
def lineNumber():
    callerFrame = inspect.stack()[1]
    return inspect.getframeinfo(callerFrame[0]).lineno


#
# Print password hash
#
# Expects:
#  list : parms [('password', string:passwordValue), ('salt', string:saltValue)]
#
# Returns:
#  int : ExitCode_*
#
# NOTE:
#  perfs exit()
#
def outputHash(parmList):
    password = Empty_String
    salt = Empty_String

    # replace "missing" with an empty list
    _parmList = parmList or []


    # exit if parm is not a non-empty list
    if type(_parmList) == list:
      if not _parmList:
        exitWithHelp(ExitCode_Error)
    else:
      exitWithHelp(ExitCode_Error)


    # get password and salt from parm
    for parm in _parmList:
      if parm[0] == 'password':
        password = parm[1] or Empty_String
      elif parm[0] == 'salt':
        salt = parm[1] or Empty_String
      else:
        exitWithHelp(ExitCode_Error)


    if password == Empty_String:
      exitWithHelp(ExitCode_Error)

    try:
      print crypt.crypt(password, getPrefix(salt))

    except ValueError:
      exitWithHelp(ExitCode_Error)


    sys.exit(ExitCode_Normal)



# main #########################################################################
# ##############################################################################
#
# Expects:
#  CLI options: see "help"
#
# Returns:
#  string : shadow file formatted password hash
#  ExitCode_* see "help"
#
def main():
    result = getCommandLineValues()
    outputHash(result)


if __name__ == "__main__":
   main()

